AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - KeyPairName
          - TomcatAMI
    ParameterLabels:
      KeyPairName:
        default: Key Pair Name
      TomcatAMI:
        default: Tomcat AMI ID
Parameters:
  KeyPairName:
    Description: >-
      The key pair to establish a SSH connection to the servers. This should
      be already created.
    Type: 'AWS::EC2::KeyPair::KeyName'
  TomcatAMI:
    Type: String
    Default: ami-2a22014f
Resources:
  # Create VPC and subnets
  XEnvVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      Tags:
        - Key: Name
          Value: XEnvVPC
  XEnvPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPrivateSubnet1
  XEnvPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPrivateSubnet2
  XEnvPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPublicSubnet1
  XEnvPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.252.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPublicSubnet2
  # Attach an internet gateway to the VPC for allowing traffic to the public 
  # subnets from the internet
  XEnvInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: XEnvInternetGateway
  XEnvVPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref XEnvVPC
      InternetGatewayId: !Ref XEnvInternetGateway
  # Define public route table for connecting the internet gateway 
  # and public subnets
  XEnvPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPublicRouteTable
  XEnvPublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPublicRouteTable
      SubnetId: !Ref XEnvPublicSubnet2
  XEnvPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPublicRouteTable
      SubnetId: !Ref XEnvPublicSubnet1
  XEnvInternetGatewayPublicRouteTableRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref XEnvPublicRouteTable
      GatewayId: !Ref XEnvInternetGateway
    DependsOn: XEnvInternetGateway
  # Definte private route table for configuring routing for private subnets
  XEnvPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPrivateRouteTable
  XEnvPrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPrivateRouteTable
      SubnetId: !Ref XEnvPrivateSubnet2
  XEnvPrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPrivateRouteTable
      SubnetId: !Ref XEnvPrivateSubnet1
  # Create EC2 instances
  XEnvPublicEC2Instance1:
    Type: 'AWS::EC2::Instance' 
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          sudo systemctl start tomcat
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref TomcatAMI
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: XEnvPublicEC2Instance1
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref XEnvPublicSubnet1
          PrivateIpAddresses:
            - PrivateIpAddress: 10.0.254.101
              Primary: 'true'
          GroupSet:
            - !Ref XEnvPublicEC2InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
  XEnvPublicEC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          sudo systemctl start tomcat
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref TomcatAMI
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: XEnvPublicEC2Instance2
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref XEnvPublicSubnet2
          PrivateIpAddresses:
            - PrivateIpAddress: 10.0.252.102
              Primary: 'true'
          GroupSet:
            - !Ref XEnvPublicEC2InstanceSecurityGroup
          AssociatePublicIpAddress: 'true'
  XEnvPrivateEC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          sudo systemctl start tomcat
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref TomcatAMI
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: XEnvPrivateEC2Instance1
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref XEnvPrivateSubnet1
          PrivateIpAddresses:
            - PrivateIpAddress: 10.0.1.101
              Primary: 'true'
          GroupSet:
            - !Ref XEnvPrivateEC2InstanceSecurityGroup
          AssociatePublicIpAddress: 'false'
  XEnvPrivateEC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          sudo systemctl start tomcat
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      ImageId: !Ref TomcatAMI
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: XEnvPrivateEC2Instance2
      NetworkInterfaces:
        - DeleteOnTermination: 'true'
          Description: Primary network interface
          DeviceIndex: 0
          SubnetId: !Ref XEnvPrivateSubnet2
          PrivateIpAddresses:
            - PrivateIpAddress: 10.0.2.102
              Primary: 'true'
          GroupSet:
            - !Ref XEnvPrivateEC2InstanceSecurityGroup
          AssociatePublicIpAddress: 'false'
  # Define EC2 instance security groups
  XEnvPublicEC2InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref XEnvVPC
      GroupDescription: Public EC2 instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  XEnvPrivateEC2InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref XEnvVPC
      GroupDescription: Private EC2 instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  # Add load balancer  
  XEnvLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Tags:
        - Key: Name
          Value: XEnvLoadBalancer
      Scheme: internet-facing
      Subnets:
        - Ref: XEnvPublicSubnet1
        - Ref: XEnvPublicSubnet2
      Instances:
        - Ref: XEnvPublicEC2Instance1
        - Ref: XEnvPublicEC2Instance2
        - Ref: XEnvPrivateEC2Instance1
        - Ref: XEnvPrivateEC2Instance2
      SecurityGroups:
        - !Ref XEnvLoadBalancerSecurityGroup
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '8080'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:8080/
        HealthyThreshold: '2'
        UnhealthyThreshold: '5'
        Interval: '6'
        Timeout: '5'
  XEnvLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref XEnvVPC
      GroupDescription: Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
Outputs:
  LoadBalancerURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - XEnvLoadBalancer
          - DNSName
    Description: Load Balancer URL
