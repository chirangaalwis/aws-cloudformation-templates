AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - KeyPairName
          - TomcatAMI
    ParameterLabels:
      KeyPairName:
        default: Key Pair Name
      TomcatAMI:
        default: Tomcat AMI ID
Parameters:
  KeyPairName:
    Description: >-
      The key pair to establish a SSH connection to the servers. This should
      be already created.
    Type: 'AWS::EC2::KeyPair::KeyName'
  TomcatAMI:
    Type: String
    Default: ami-2a22014f
Resources:
  # Create VPC and subnets
  XEnvVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: XEnvVPC
  XEnvPrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPrivateSubnet1
  XEnvPrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPrivateSubnet2
  XEnvPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.254.0/24
      AvailabilityZone: !Select 
        - '0'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPublicSubnet1
  XEnvPublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.252.0/24
      AvailabilityZone: !Select 
        - '1'
        - !GetAZs ''
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPublicSubnet2
  # Attach an internet gateway to the VPC for allowing traffic to the public 
  # subnets from the internet
  XEnvInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: XEnvInternetGateway
  XEnvVPCInternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref XEnvVPC
      InternetGatewayId: !Ref XEnvInternetGateway
  # Define public route table for connecting the internet gateway 
  # and public subnets
  XEnvPublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPublicRouteTable
  XEnvPublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPublicRouteTable
      SubnetId: !Ref XEnvPublicSubnet2
  XEnvPublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPublicRouteTable
      SubnetId: !Ref XEnvPublicSubnet1
  XEnvInternetGatewayPublicRouteTableRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref XEnvPublicRouteTable
      GatewayId: !Ref XEnvInternetGateway
    DependsOn: XEnvInternetGateway
  # Definte private route table for configuring routing for private subnets
  XEnvPrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref XEnvVPC
      Tags:
        - Key: Name
          Value: XEnvPrivateRouteTable
  XEnvPrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPrivateRouteTable
      SubnetId: !Ref XEnvPrivateSubnet2
  XEnvPrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref XEnvPrivateRouteTable
      SubnetId: !Ref XEnvPrivateSubnet1
  # Create elastic file system
  XEnvFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      FileSystemTags:
      - Key: Name
        Value: XEnvFileSystem
  XEnvPublicSubnet1MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: XEnvFileSystem
      SubnetId:
        Ref: XEnvPublicSubnet1
      SecurityGroups:
      - Ref: XEnvMountTargetSecurityGroup
  XEnvPublicSubnet2MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: XEnvFileSystem
      SubnetId:
        Ref: XEnvPublicSubnet2
      SecurityGroups:
      - Ref: XEnvMountTargetSecurityGroup
  XEnvMountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: XEnvVPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: 0.0.0.0/0
  # Create Route53 private hosted zone
  XEnvLambdaExecutionIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: XEnvHostedZoneLambdaFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeVpcs'
                  - 'ec2:DescribeRegions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'route53:CreateHostedZone'
                  - 'route53:ListHostedZones'
                  - 'route53:UpdateHostedZoneComment'
                  - 'route53:AssociateHostedZoneWithVPC'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'route53:GetChange'
                Resource: 'arn:aws:route53:::change/*'
              - Effect: Allow
                Action:
                  - 'route53:GetHostedZone'
                  - 'route53:DeleteHostedZone'
                  - 'route53:ListResourceRecordSets'
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:ChangeTagsForResource'
                Resource: 'arn:aws:route53:::hostedzone/*'
  XEnvHostedZoneLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        # Lambda function source reference: https://github.com/dkalintsev/Bits-and-bobs/
        # Max ZipFile length is 4096 characters, hence tabs have been defined using \t 
        ZipFile: !Join 
          - |+

          - - import json
            - import cfnresponse
            - import boto3
            - import random
            - import string
            - import sys
            - ''
            - 'def handler(event, context):'
            - "\tif event['RequestType'] == 'Delete':"
            - "\t\tclient = boto3.client('route53')"
            - "\t\thostedZoneId = event['PhysicalResourceId']"
            - "\t\tzones = client.list_hosted_zones()"
            - "\t\tmyZone = filter(lambda find_rec: find_rec['Id'] == '/hostedzone/'+hostedZoneId, zones['HostedZones'])"
            - "\t\tif len(myZone) == 1:"
            - "\t\t\ttry:"
            - "\t\t\t\tprint 'Listing resource record sets..'"
            - "\t\t\t\tresponse = client.list_resource_record_sets ("
            - "\t\t\t\t\tHostedZoneId = hostedZoneId"
            - "\t\t\t\t)"
            - "\t\t\t\tif len(response['ResourceRecordSets']) > 2:"
            - "\t\t\t\t\tprint 'Iterating over records to delete..'"
            - "\t\t\t\t\tfor record in response['ResourceRecordSets']:"
            - "\t\t\t\t\t\tif record['Type'] != 'SOA' and record['Type'] != 'NS':"
            - "\t\t\t\t\t\t\tprint 'Deleting record: ', record"
            - "\t\t\t\t\t\t\tresult = client.change_resource_record_sets ("
            - "\t\t\t\t\t\t\t\tHostedZoneId = hostedZoneId,"
            - "\t\t\t\t\t\t\t\tChangeBatch = {"
            - "\t\t\t\t\t\t\t\t\t\"Changes\": ["
            - "\t\t\t\t\t\t\t\t\t\t{"
            - "\t\t\t\t\t\t\t\t\t\t\t\"Action\": \"DELETE\","
            - "\t\t\t\t\t\t\t\t\t\t\t\"ResourceRecordSet\": record"
            - "\t\t\t\t\t\t\t\t\t\t}"
            - "\t\t\t\t\t\t\t\t\t]"
            - "\t\t\t\t\t\t\t\t}"
            - "\t\t\t\t\t\t\t)"
            - "\t\t\t\tprint 'Deleting the zone itself..'"
            - "\t\t\t\tresponse = client.delete_hosted_zone ("
            - "\t\t\t\t\tId = hostedZoneId"
            - "\t\t\t\t)"
            - "\t\t\t\tprint 'Deleted the zone successfully.'"
            - "\t\t\t\tresponseData = {}"
            - "\t\t\t\tresponseData['HostedZoneId'] = hostedZoneId"
            - "\t\t\t\tcfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])"
            - "\t\t\texcept Exception as err:"
            - "\t\t\t\tprint 'Error encountered: ', err, sys.exc_info()[0]"
            - "\t\t\t\tresponseData = {}"
            - "\t\t\t\tcfnresponse.send(event, context, cfnresponse.FAILED, responseData, event['PhysicalResourceId'])"
            - "\t\telse:"
            - "\t\t\tprint 'Zone ID lookup did not return exactly one result, bailing.'"
            - "\t\t\tresponseData = {}"
            - "\t\t\tcfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])"
            - ''
            - "\telif event['RequestType'] == 'Create':"
            - "\t\tclient = boto3.client('route53')"
            - "\t\tkwargs = {}"
            - "\t\tz_name=event['ResourceProperties']['Name']"
            - "\t\tif z_name[-1] != '.':"
            - "\t\t\tz_name = z_name + '.'"
            - "\t\tkwargs['Name'] = z_name"
            - "\t\tkwargs['CallerReference'] = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(8))"
            - "\t\thzconf = event['ResourceProperties'].get('HostedZoneConfig', None)"
            - "\t\tregion = event['ResourceProperties'].get('Region', None)"
            - "\t\tvpc = event['ResourceProperties'].get('VPC', None)"
            - "\t\thztags = event['ResourceProperties'].get('HostedZoneTags', None)"
            - "\t\tif vpc:"
            - "\t\t\tkwargs['VPC'] = vpc"
            - "\t\tif hzconf:"
            - "\t\t\thzc1 = {}"
            - "\t\t\thzc1['Comment'] = hzconf.get('Comment', None)"
            - "\t\t\tpz = hzconf.get('PrivateZone', None)"
            - "\t\t\tif pz:"
            - "\t\t\t\thzc1['PrivateZone'] = json.loads(pz)"
            - "\t\t\tkwargs['HostedZoneConfig'] = hzc1"
            - "\t\ttry:"
            - "\t\t\tprint 'Creating the Hosted Zone..'"
            - "\t\t\tresponse = client.create_hosted_zone (**kwargs)"
            - "\t\t\thostedZoneId1 = response['HostedZone']['Id']"
            - "\t\t\thostedZoneId = str.split(str(hostedZoneId1),'/')[2]"
            - "\t\t\tprint 'New Hosted Zone created:', hostedZoneId"
            - "\t\t\tresponseData = {}"
            - "\t\t\tresponseData['HostedZoneId'] = hostedZoneId"
            - "\t\t\tds = response.get('DelegationSet', None)"
            - "\t\t\tif ds:"
            - "\t\t\t\tresponseData['NameServers'] = ds['NameServers']"
            - "\t\t\telse:"
            - "\t\t\t\tresponseData['NameServers'] = ['Private zone created', 'No DelegationSet returned', '', '']"
            - "\t\t\tif hztags:"
            - "\t\t\t\tprint 'HostedZoneTags is supplied; applying tags to the new zone.'"
            - "\t\t\t\tkwags = {}"
            - "\t\t\t\tkwags['ResourceType'] = 'hostedzone'"
            - "\t\t\t\tkwags['ResourceId'] = hostedZoneId"
            - "\t\t\t\tkwags['AddTags'] = hztags"
            - "\t\t\t\tresponse = client.change_tags_for_resource(**kwags)"
            - "\t\t\tcfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, hostedZoneId)"
            - "\t\texcept Exception as err:"
            - "\t\t\tprint 'Error encountered: ', err, sys.exc_info()[0]"
            - "\t\t\tresponseData = {}"
            - "\t\t\thostedZoneId = 'XXX'"
            - "\t\t\tresponseData['HostedZoneId'] = hostedZoneId"
            - "\t\t\tcfnresponse.send(event, context, cfnresponse.FAILED, responseData, hostedZoneId)"
            - "\telse:"
            - "\t\tprint 'RequestType is not Create or Delete; bailing.'"
            - "\t\tcfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, event['PhysicalResourceId'])"
      Handler: index.handler
      Runtime: python2.7
      Timeout: '180'
      Role: !GetAtt 
        - XEnvLambdaExecutionIAMRole
        - Arn
  XEnvHostedZoneLambdaCallout:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt 
        - XEnvHostedZoneLambdaFunction
        - Arn
      HostedZoneConfig:
        Comment: ''
        PrivateZone: 'true'
      Name: foo.org
      VPC:
        VPCRegion: !Ref 'AWS::Region'
        VPCId: !Ref XEnvVPC
  # Create an IAM role for updating DNS record set via AWS CLI
  XEnvRoute53IAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: XEnvRoute53IAMRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'route53:ChangeResourceRecordSets'
                Resource: '*'
  XEnvAWSCLIInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref XEnvRoute53IAMRole
      InstanceProfileName: XEnvAWSCLIInstanceProfile
  # Create EC2 instances via autoscaling groups for providing auto-healing
  # Public instance 1
  XEnvPublicInstance1LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref TomcatAMI
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref XEnvPublicEC2InstanceSecurityGroup
      IamInstanceProfile: !Ref XEnvAWSCLIInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          echo "---> Starting Tomcat..."
          sudo systemctl start tomcat
          echo "---> Installing nfs-common..."
          sudo apt-get install -y nfs-common
          echo "---> Mounting EFS volume..."
          mkdir /mnt/efs
          sudo mount -t nfs4 -o nfsvers=4.1 ${XEnvFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          echo "---> Installing awscli..."
          sudo apt-get install -y awscli
          echo "---> Updating instance domain name..."
          export instance_ip=`ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'`
          cat > record-set.json << EOF
          {
            "Comment": "Instance 1",
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "instance1.foo.org",
                  "Type": "A",
                  "TTL": 30,
                  "ResourceRecords": [
                    {
                      "Value": "$instance_ip"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          aws route53 change-resource-record-sets --hosted-zone-id ${XEnvHostedZoneLambdaCallout} --change-batch file://record-set.json
          echo "---> Initialization completed"          
  XEnvPublicInstance1AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref XEnvPublicInstance1LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 10
      TargetGroupARNs:
        - !Ref XEnvAppLoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref XEnvPublicSubnet1
      Tags:
        - Key: Name
          Value: XEnvPublicEC2Instance1
          PropagateAtLaunch: 'true'
  # Public instance 2
  XEnvPublicInstance2LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref TomcatAMI
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '20'
            VolumeType: gp2
            DeleteOnTermination: 'true'
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref XEnvPublicEC2InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          echo "---> Starting Tomcat..."
          sudo systemctl start tomcat
          echo "---> Installing nfs-common..."
          sudo apt-get install -y nfs-common
          echo "---> Mounting EFS volume..."
          mkdir /mnt/efs
          sudo mount -t nfs4 -o nfsvers=4.1 ${XEnvFileSystem}.efs.${AWS::Region}.amazonaws.com:/ /mnt/efs
          echo "---> Installing awscli..."
          sudo apt-get install -y awscli
          echo "---> Updating instance domain name..."
          export instance_ip=`ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/'`
          cat > record-set.json << EOF
          {
            "Comment": "Instance 2",
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "instance2.foo.org",
                  "Type": "A",
                  "TTL": 30,
                  "ResourceRecords": [
                    {
                      "Value": "$instance_ip"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          aws route53 change-resource-record-sets --hosted-zone-id ${XEnvHostedZoneLambdaCallout} --change-batch file://record-set.json
          echo "---> Initialization completed"
  XEnvPublicInstance2AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref XEnvPublicInstance2LaunchConfiguration
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 1
      HealthCheckType: ELB
      HealthCheckGracePeriod: 10
      TargetGroupARNs:
        - !Ref XEnvAppLoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref XEnvPublicSubnet2
      Tags:
        - Key: Name
          Value: XEnvPublicEC2Instance2
          PropagateAtLaunch: 'true'
  # Define EC2 instance security groups
  XEnvPublicEC2InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref XEnvVPC
      GroupDescription: Public EC2 instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  XEnvPrivateEC2InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref XEnvVPC
      GroupDescription: Private EC2 instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: 0.0.0.0/0
  # Add application load balancer
  XEnvAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
        - Ref: XEnvPublicSubnet1
        - Ref: XEnvPublicSubnet2
      SecurityGroups:
        - Ref: XEnvAppLoadBalancerSecurityGroup
  XEnvAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: XEnvAppLoadBalancerTargetGroup
      LoadBalancerArn:
        Ref: XEnvAppLoadBalancer
      Port: 80
      Protocol: HTTP
  XEnvAppLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: XEnvAppLoadBalancerTargetGroup
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      VpcId:
        Ref: XEnvVPC
  XEnvAppLoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref XEnvVPC
      GroupDescription: Load Balancer Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
Outputs:
  LoadBalancerURL:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - XEnvAppLoadBalancer
          - DNSName
    Description: Load Balancer URL
